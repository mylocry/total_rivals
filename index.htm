<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Marvel Rivals - Saturday Nights Tournament</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Rajdhani:wght@400;500;700&family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --font-display: 'Orbitron', sans-serif; 
            --font-heading: 'Rajdhani', sans-serif; 
            --font-body: 'Roboto', sans-serif;    

            --color-bg-deep: #080a13; 
            --color-bg-main: #0f1423; 
            --color-bg-section: rgba(18, 23, 40, 0.9); 
            --color-bg-element: #1e253f; 
            
            --color-text-light: #f0f0f5;
            --color-text-medium: #c0c0d0;
            --color-text-dark: #808090;
            --color-text-title-main: #ffffff;

            --color-accent-primary: #00d1ff;   
            --color-accent-secondary: #ff29b3; 
            --color-accent-tertiary: #a855f7;  
            --color-accent-highlight: #f5d742; 
            --color-accent-success: #36ff9a;  
            --color-accent-danger: #ff4b4b;   

            /* Team Colors */
            --team-color-red: #ff4757;
            --team-color-blue: #3742fa;
            --team-color-green: #2ed573;
            --team-color-yellow: #ffa502;
            --team-color-purple: #706fd3;

            --border-radius-xl: 15px;
            --border-radius-lg: 10px;
            --border-radius-md: 6px;
            
            --shadow-glow-primary: 0 0 18px rgba(0, 209, 255, 0.6), 0 0 8px rgba(0, 209, 255, 0.4);
            --shadow-glow-secondary: 0 0 18px rgba(255, 41, 179, 0.6), 0 0 8px rgba(255, 41, 179, 0.4);
        }

        body {
            font-family: var(--font-body);
            font-size: 16px; /* Base for mobile, will adjust up for desktop */
            line-height: 1.7;
            margin: 0;
            padding: 15px; /* Reduced padding for mobile */
            background-color: var(--color-bg-deep);
            background-image: url('https://www.marvelrivals.com/images/layout/main_bg.jpg'); 
            background-size: cover;
            background-position: center center;
            background-attachment: fixed;
            color: var(--color-text-light);
            overflow-x: hidden;
        }

        .container {
            max-width: 1200px;
            margin: 15px auto; /* Reduced margin for mobile */
            background: rgba(15, 20, 35, 0.92); 
            padding: 20px; /* Reduced padding for mobile */
            border-radius: var(--border-radius-xl);
            border: 1px solid var(--color-accent-primary);
            box-shadow: 0 0 40px rgba(0, 209, 255, 0.35), 0 0 15px rgba(0,0,0,0.6);
            backdrop-filter: blur(12px);
        }

        h1, h2, h3, h4 {
            font-family: var(--font-heading);
            color: var(--color-text-title-main);
            text-transform: uppercase;
            letter-spacing: 1.2px;
        }

        h1 { /* Page Title */
            text-align: center;
            font-family: var(--font-display);
            font-size: 2.5em; /* Adjusted for potential line break */
            line-height: 1.2; /* For multi-line h1 */
            font-weight: 900;
            color: var(--color-accent-highlight);
            text-shadow: 0 0 6px var(--color-accent-highlight), 0 0 12px var(--color-accent-secondary), 0 0 20px var(--color-accent-primary), 0 2px 2px rgba(0,0,0,0.5);
            margin-top: 10px; 
            margin-bottom: 20px; 
        }

        .teams-doc-link-wrapper { 
            text-align: center;
            margin-bottom: 25px;
        }
        .teams-doc-link {
            display: inline-block;
            text-decoration: none;
            border-radius: var(--border-radius-lg);
            transition: transform 0.2s ease-out, box-shadow 0.2s ease-out;
        }
        .teams-doc-link:hover {
            transform: scale(1.03); /* Slightly less aggressive hover */
            box-shadow: 0 0 20px var(--color-accent-highlight);
        }
        .teams-doc-block {
            background: linear-gradient(45deg, var(--color-accent-highlight), gold);
            color: var(--color-bg-deep);
            padding: 12px 25px; /* Adjusted padding */
            font-family: var(--font-display);
            font-size: 1.5em; /* Adjusted size */
            font-weight: 700;
            text-align: center;
            letter-spacing: 1.5px;
            border: 3px solid gold;
            border-radius: var(--border-radius-lg);
            cursor: pointer;
        }
        
        .jump-in-section {
            background-color: rgba(var(--color-accent-success), 0.15);
            border: 1px solid var(--color-accent-success);
            padding: 15px 20px;
            margin: 25px 0;
            border-radius: var(--border-radius-lg);
            text-align: center;
        }
        .jump-in-section p {
            color: var(--color-text-light);
            font-size: 1.1em;
            margin-bottom: 10px;
        }
        .jump-in-section a {
            color: var(--color-accent-highlight);
            font-weight: 700;
            text-decoration: underline;
        }
        .jump-in-section a:hover {
            text-decoration: none;
            color: var(--color-accent-success);
        }


        h2 { 
            font-size: 2em; 
            font-weight: 700;
            color: var(--color-accent-primary);
            border-bottom: 3px solid var(--color-accent-tertiary);
            padding-bottom: 10px;
            margin-top: 40px;
            margin-bottom: 20px;
            text-shadow: 0 0 4px var(--color-accent-primary);
        }

        h3 { 
            font-size: 1.6em; 
            color: var(--color-accent-secondary);
            margin-top: 30px;
            margin-bottom: 15px;
            font-weight: 700;
        }
        
        h4 { 
            font-size: 1.4em; 
            color: var(--color-accent-tertiary);
            margin-top: 25px;
            margin-bottom: 10px;
            border-left: 4px solid var(--color-accent-highlight);
            padding-left: 10px;
            font-weight: 700;
        }
        
        p, li {
            font-size: 1.1em; 
            margin-bottom: 10px;
            color: var(--color-text-medium);
        }
        strong {
            font-weight: 700;
            color: var(--color-text-light);
        }

        hr.custom-divider {
            border: 0;
            height: 2px;
            background-image: linear-gradient(to right, rgba(0,0,0,0), var(--color-accent-tertiary), rgba(0,0,0,0));
            margin: 30px 0;
        }

        .table-wrapper { /* New wrapper for table responsiveness */
            overflow-x: auto;
            margin-bottom: 35px;
            -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
        }
        .table-wrapper table {
             margin-bottom: 0; /* Remove margin from table if wrapper handles it */
        }


        table { 
            width: 100%;
            min-width: 600px; /* Prevent table from collapsing too much */
            border-collapse: separate;
            border-spacing: 0;
            /* margin-bottom: 35px; Remove if using wrapper */
            box-shadow: 0 5px 15px rgba(0,0,0,0.4);
            border-radius: var(--border-radius-lg);
            overflow: hidden;
        }

        th, td { 
            border: 1px solid var(--color-bg-element);
            padding: 12px 15px; 
            text-align: left;
            font-size: 1em; 
            font-weight: 500;
            white-space: nowrap; /* Keep table content on one line */
        }

        th { 
            background: linear-gradient(60deg, var(--color-accent-primary), var(--color-accent-tertiary));
            color: var(--color-text-title-main);
            font-family: var(--font-heading);
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 1px;
            position: sticky; /* Make header sticky when scrolling horizontally */
            top: 0;
            z-index: 1;
        }
        
        td { 
            background-color: var(--color-bg-main);
            color: var(--color-text-medium);
        }
        tr:hover td { 
            background-color: var(--color-bg-element);
            color: var(--color-accent-highlight);
        }
        .team-name-cell {
            display: flex;
            align-items: center;
            font-weight: 700 !important;
        }
        .team-name-cell svg { 
            width: 18px;   /* Adjusted for table cell */
            height: 18px;  
            margin-right: 8px;
            flex-shrink: 0;
        }
        .team-member-link-placeholder {
            font-size: 0.85em;
            margin-left: 8px;
            color: var(--color-text-dark);
            cursor: help; 
            opacity: 0.7;
            text-decoration: none; 
        }
        .team-member-link-placeholder:hover {
            opacity: 1;
            color: var(--color-accent-primary);
        }

        .match-entry {
            padding: 15px; 
            margin-bottom: 12px; 
            background-color: rgba(0,0,0,0.25);
            border-radius: var(--border-radius-md);
            border-left: 4px solid var(--color-accent-secondary);
        }
        .match-details { 
            display: flex;
            flex-wrap: wrap; /* Allow wrapping for team names */
            align-items: center;
            justify-content: center; /* Center for wrapped state */
            gap: 10px; /* Gap between items */
            margin-bottom: 10px; 
        }
        .match-details .team-identifier { 
             display: flex;
             align-items: center;
             font-weight: 700; 
             color: var(--color-text-light);
             font-size: 1.1em; /* Adjusted for mobile */
        }
        .match-details .team-identifier svg {
            width: 16px; height: 16px; margin-right: 6px; 
        }
        .match-details .vs-text {
            font-weight: 700;
            color: var(--color-accent-highlight);
            font-size: 1em; /* Adjusted for mobile */
        }
        .match-map-info {
            font-size: 1em; 
            color: var(--color-text-light); 
            font-style: normal; 
            margin-bottom: 12px; 
            padding: 10px; 
            background-color: rgba(0,0,0,0.2); 
            border-radius: var(--border-radius-small);
            text-align: center;
            border-top: 1px solid var(--color-bg-element);
            border-bottom: 1px solid var(--color-bg-element);
        }
         .match-map-info strong {
            color: var(--color-accent-primary);
         }
        .match-score-display { 
            font-size: 1.2em; /* Adjusted for mobile */
            font-weight: 700;
            color: var(--color-accent-highlight);
            text-align: center;
            padding: 8px 0;
        }
        .match-score-display .placeholder {
            color: var(--color-text-dark);
            font-style: italic;
            font-size: 0.9em;
        }

        .score-controls { 
            text-align: center;
            margin: 25px 0;
        }
        .share-table-button { 
            padding: 12px 24px; 
            color: white;
            border: none;
            border-radius: var(--border-radius-md);
            cursor: pointer;
            font-family: var(--font-display);
            font-size: 1.1em; /* Adjusted for mobile */
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 1.2px;
            box-shadow: 0 0 12px rgba(0,0,0,0.6), inset 0 0 6px rgba(255,255,255,0.15);
            transition: all 0.3s ease;
            margin: 10px; 
            background: linear-gradient(60deg, var(--color-accent-primary), var(--color-accent-tertiary));
        }
        .share-table-button:hover {
            transform: scale(1.03); /* Adjusted hover */
            opacity: 0.9;
        }
        .share-table-button:focus {
            outline: 3px solid var(--color-accent-highlight);
        }

        .section {
            margin-bottom: 40px; /* Adjusted margin */
            padding: 20px; /* Adjusted padding */
            background: var(--color-bg-section);
            border: 1px solid var(--color-bg-element);
            border-radius: var(--border-radius-lg);
            box-shadow: 0 6px 20px rgba(0,0,0,0.25);
        }
        .section ul, .section ol {
            padding-left: 25px; /* Adjusted padding */
        }

        .playoff-bracket {
            display: flex;
            flex-direction: column; /* Stack columns on mobile by default */
            align-items: center; /* Center stacked columns */
            gap: 20px; /* Gap between stacked semi/final columns */
            margin-top: 30px;
            padding: 20px 0;
        }

        .playoff-column {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 30px; 
            width: 100%; /* Take full width when stacked */
        }

        .playoff-match {
            background: linear-gradient(145deg, var(--color-bg-element), var(--color-bg-main));
            border: 2px solid var(--color-accent-primary);
            box-shadow: var(--shadow-glow-primary);
            padding: 15px; 
            margin: 10px 0;
            border-radius: var(--border-radius-md);
            width: 90%; 
            max-width: 320px; /* Max width for readability */
            text-align: center;
            font-family: var(--font-heading);
            font-weight: 700; 
            font-size: 1.1em; 
            color: var(--color-text-light);
            transition: all 0.3s ease-out;
        }
        .playoff-match:hover {
            transform: translateY(-5px) scale(1.02);
            border-color: var(--color-accent-highlight);
            box-shadow: 0 0 20px var(--color-accent-highlight), 0 0 8px var(--color-accent-highlight);
        }
        .playoff-match .team-placeholder, .playoff-match .seed-info {
            display: block;
            margin: 3px 0;
        }
         .playoff-match .seed-info {
            font-size: 0.8em;
            color: var(--color-text-medium);
            font-family: var(--font-body);
            text-transform: none;
            letter-spacing: 0.5px;
        }

        .note {
            font-style: normal; 
            font-weight: 500; 
            color: var(--color-text-medium);
            background-color: rgba(0,0,0,0.2);
            padding: 12px; 
            border-left: 5px solid var(--color-accent-tertiary);
            border-radius: var(--border-radius-md);
            margin: 15px 0; 
            font-size: 1em; 
        }
        .grand-final-perks { 
            background-color: rgba(245, 215, 66, 0.1); 
            border: 1px solid var(--color-accent-highlight);
            padding: 15px;
            margin-top: 20px;
            border-radius: var(--border-radius-md);
            text-align: center;
        }
        .grand-final-perks p {
            color: var(--color-text-light); 
            font-weight: 700;
            font-size: 1.05em;
            margin: 5px 0;
        }
         .grand-final-perks strong { 
            color: var(--color-accent-highlight);
         }
        
        #shareableTableCardContainer {
            margin: 25px auto;
            padding: 15px;
            background: var(--color-bg-main);
            border: 2px solid var(--color-accent-primary);
            border-radius: var(--border-radius-lg);
            box-shadow: 0 0 20px rgba(0, 209, 255, 0.25);
            max-width: 95%; 
            overflow-x: auto; /* Allow horizontal scroll for the card itself if content is too wide */
        }
        #shareableTableCardContainer h3 {
            text-align: center;
            color: var(--color-accent-highlight);
            margin-bottom: 15px;
            font-size: 1.5em;
        }
        .shareable-html-table { /* Table inside the card */
            width: 100%;
            min-width: 550px; /* Prevent collapsing too much */
            border-collapse: collapse;
            font-size: 0.9em;
            color: var(--color-text-light);
        }
        .shareable-html-table th, .shareable-html-table td {
            border: 1px solid var(--color-bg-element);
            padding: 8px 10px;
            text-align: left;
            white-space: nowrap;
        }
        .shareable-html-table th {
            background-color: var(--color-accent-tertiary);
            color: var(--color-text-title-main);
            font-family: var(--font-heading);
            text-transform: uppercase;
            position: sticky; top: 0; z-index: 1; /* Sticky header for card table */
        }
        .shareable-html-table td {
            background-color: var(--color-bg-main);
        }
        .shareable-html-table tr:nth-child(even) td {
            background-color: var(--color-bg-element);
        }
        .shareable-html-table .team-icon-share svg { 
            width: 14px;
            height: 14px;
            margin-right: 6px;
            vertical-align: middle;
        }

        @keyframes fadeInFromBottom {
            from { opacity: 0; transform: translateY(20px); } /* Reduced Y translation */
            to { opacity: 1; transform: translateY(0); }
        }
        .container > .section, .container > h1, .teams-doc-link-wrapper, .jump-in-section { 
            animation: fadeInFromBottom 0.5s ease-out forwards; /* Faster animation */
        }
        .teams-doc-link-wrapper { animation-delay: 0.05s; }
        .jump-in-section { animation-delay: 0.1s; }
        .container > .section:nth-of-type(1) { animation-delay: 0.15s; } /* Target overview specifically */
        .container > .section:nth-of-type(2) { animation-delay: 0.2s; }


        /* Desktop and larger screens */
        @media (min-width: 768px) {
            body {
                font-size: 17px;
                padding: 25px;
            }
            .container {
                margin: 20px auto;
                padding: 30px 40px;
            }
            h1 { font-size: 3.2em; }
            .teams-doc-block { font-size: 1.8em; padding: 15px 30px; }
            .jump-in-section p { font-size: 1.1em; }
            h2 { font-size: 2.4em; }
            h3 { font-size: 1.8em; }
            h4 { font-size: 1.5em; }
            p, li { font-size: 1.15em; }
            th, td { font-size: 1.1em; padding: 14px 18px; }
            .team-name-cell svg { width: 20px; height: 20px; margin-right: 10px; }
            .team-member-link-placeholder { font-size: 0.9em; }
            .match-details .team-identifier { font-size: 1.2em; }
            .match-details .team-identifier svg { width: 18px; height: 18px; margin-right: 8px; }
            .match-details .vs-text { font-size: 1.1em; }
            .match-map-info { font-size: 1.05em; padding: 12px; }
            .match-score-display { font-size: 1.3em; }
            .share-table-button { font-size: 1.3em; padding: 14px 28px; }
            .section { padding: 25px 30px; margin-bottom: 45px; }
            .section ul, .section ol { padding-left: 30px; }
            .playoff-bracket { flex-direction: row; align-items: flex-start; gap: 0;} /* Revert to row for desktop */
            .playoff-column { width: auto; /* Allow columns to size based on content */ }
            .playoff-match { font-size: 1.2em; padding: 18px 22px; width: 280px; }
            .note { font-size: 1.05em; padding: 15px; margin: 20px 0; }
            .grand-final-perks p { font-size: 1.1em; }
             #shareableTableCardContainer { max-width: 700px; padding: 20px; }
            #shareableTableCardContainer h3 { font-size: 1.8em; }
            .shareable-html-table { font-size: 0.95em; }
            .shareable-html-table th, .shareable-html-table td { padding: 10px 12px;}
            .shareable-html-table .team-icon-share svg { width: 16px; height: 16px; }
        }

    </style>
</head>
<body>
    <div class="container">
        <h1>MARVEL RIVALS<br>SATURDAY NIGHTS</h1> 

        <div class="teams-doc-link-wrapper">
            <a href="https://docs.google.com/spreadsheets/d/1B-Ogkj1nWrhqDxgpBvGmtZEcLpOPfbdFbDntJlUqX2o/edit?gid=730262166#gid=730262166" target="_blank" class="teams-doc-link">
                <div class="teams-doc-block">
                    &gt; VIEW TEAM ROSTERS HERE &lt;
                </div>
            </a>
        </div>

        <div class="jump-in-section">
            <p>Want to jump into the action or be a backup hero? 🦸<br>If you haven't registered yet, you're free to fill out <a href="https://forms.gle/yWpEJniRvBsaqbsC6" target="_blank"><strong>THE FORM</strong></a>!</p>
            <p><small>Teams often need backup players if someone can't make it to a game.</small></p>
        </div>

        <div class="section overview-section">
            <h2>Tournament Lowdown!</h2> 
            <p>Hey everyone! Welcome to our awesome company Marvel game tournament! We've got <strong>5 super teams</strong> ready to battle it out!</p>
            <p><strong>Here’s the Game Plan:</strong></p>
            <ul>
                <li><strong>Part 1: The Big Group Stage (5 Saturdays)</strong>
                    <ul>
                        <li>All 5 teams will play against each other <strong>one time</strong> (a single round-robin).</li>
                        <li>Every Saturday, starting <strong><span id="startDateDisplay">June 21, 2025</span></strong>, we'll have 2 matches. One team gets a break (a "bye"). This goes on for 5 weeks!</li>
                        <li>Matches are "Best of 3" rounds – first team to win 2 rounds wins the match!</li>
                        <li><strong>Maps & Game Modes for these games will be picked following special rules!</strong> (Details below: 1 Domination game per day, map variety prioritized).</li>
                    </ul>
                </li>
                <hr class="custom-divider">
                <li><strong>Part 2: The Finals Showdown! (Saturdays 6 & 7)</strong>
                    <ul>
                        <li>The <strong>Top 4 teams</strong> from the group stage move on.</li>
                        <li><strong>Saturday 6 (<span id="playoffDate1"></span>):</strong> Semi-Finals! (Best team vs. 4th best, 2nd best vs. 3rd best).</li>
                        <li><strong>Saturday 7 (<span id="playoffDate2"></span>):</strong> Fight for 3rd Place & The Grand Championship Final!</li>
                        <li><strong>All final matches are "Best of 3" Maps, not Rounds!</li>
                    </ul>
                </li>
            </ul>
             <p class="note"><strong>Important Note on Team Mode Distribution:</strong> The system guarantees <strong>one Domination game per Saturday</strong> and varies other modes to enhance map diversity. This means each team should play approximately <strong>2 Domination games</strong> during the group stage. The exact count of Convoy/Convergence games per team will vary, but all teams will get a good mix.</p>
        </div>

        <div class="section scoring-section"> 
            <h2>How Points Work</h2>
            <p>For the group stage, here’s how teams get points for each "Best of 3" match (scores are updated by the organizer after matches conclude):</p>
            <ul>
                <li><strong>WIN the Match (score 2-0 or 2-1 in rounds):</strong> Give team <strong>3 Points!</strong></li>
                <li><strong>LOSE the Match (but win 1 round, score 1-2):</strong> Team still gets <strong>1 Point!</strong> (Good effort!)</li>
                <li><strong>LOSE the Match (and win 0 rounds, score 0-2):</strong> Team gets <strong>0 Points.</strong></li>
            </ul>
            <p class="note">A "Best of 3" match ends as soon as one team wins 2 rounds. Scores are updated on this page after matches are played.</p>
        </div>

        <div class="section rules-section">
            <h2>Hero Bans: The Pre-Game Strategy!</h2> <p>Before each game starts, teams will do a "Ban Phase". This is where you make smart choices to outwit the other team!</p>
            
            <h4>The Ban Phase (4 Heroes Banned Total):</h4>
            <p>Each team gets to ban <strong>TWO heroes</strong>. Here's how it works:</p>
            <ol>
                <li><strong>First Ban Round:</strong> Both teams choose their <strong>first</strong> hero to ban <strong>at the same time</strong>. These two heroes are now out for this game.</li>
                <li><strong>Second Ban Round:</strong> Then, both teams choose their <strong>second</strong> hero to ban, again, <strong>at the same time</strong>. These next two heroes are also out.</li>
            </ol>
            <p>After these two rounds, a total of <strong>4 heroes are banned</strong> and cannot be picked by anyone for this game. Choose your bans wisely!</p>
            <p class="note">This banning process usually happens before each game in your "Best of 3" match, allowing you to adapt your strategy!</p>
        </div>


        <div class="section round-robin-section">
            <h2>Group Stage: Current Scores!</h2>
            
            <div class="table-wrapper">
                <table id="leagueTable">
                    <thead>
                        <tr>
                            <th>Rank</th>
                            <th>Team</th>
                            <th>Played</th> 
                            <th>Won</th>
                            <th>Lost</th>
                            <th>Rounds Won</th>
                            <th>Rounds Lost</th>
                            <th>Points</th> 
                        </tr>
                    </thead>
                    <tbody>
                        </tbody>
                </table>
            </div>
            <div class="score-controls"> 
                <button class="share-table-button" onclick="generateShareableTableCard()">Show Shareable Table Card</button>
            </div>
            <div id="shareableTableCardContainer" style="display:none;">
                <h3>Shareable League Standings:</h3>
                 <div class="table-wrapper"> 
                    <div id="shareableTableDisplay"></div>
                </div>
                <p class="note" style="text-align:center; margin-top:15px;">You can screenshot this card to share!</p>
            </div>


            <h3>Match Schedule & Results</h3>
            <p class="note">Match results are updated here by the organizer after games are played.</p>
            <div id="matchSchedule">
                </div>
        </div>

        <div class="section playoffs-section">
            <h2>Finals Showdown Bracket!</h2>
            <p>The Top 4 teams from the Group Stage go here! Scores decide who plays who.</p>
            <div class="playoff-bracket">
                <div class="playoff-column" id="semi-finals">
                    <h3>Semi-Finals <span id="playoffDate1Header"></span></h3>
                    <div class="playoff-match" id="sf1">
                        <span class="team-placeholder">Team Seed 1</span> vs <span class="team-placeholder">Team Seed 4</span>
                        <span class="seed-info">(Match A)</span>
                    </div>
                    <div class="playoff-match" id="sf2">
                        <span class="team-placeholder">Team Seed 2</span> vs <span class="team-placeholder">Team Seed 3</span>
                        <span class="seed-info">(Match B)</span>
                    </div>
                </div>
                <div class="playoff-column finals-column" id="finals"> 
                    <h3>Grand Final! <span id="playoffDate2Header"></span></h3>
                    <div class="playoff-match" id="final">
                         <span class="team-placeholder">Winner of Match A</span> vs <span class="team-placeholder">Winner of Match B</span>
                         <span class="seed-info">(For the Championship!)</span>
                    </div>
                    <h3>Fight for 3rd Place! <span id="playoffDate2HeaderThird"></span></h3>
                    <div class="playoff-match" id="third-place">
                        <span class="team-placeholder">Loser of Match A</span> vs <span class="team-placeholder">Loser of Match B</span>
                        <span class="seed-info">(For Bronze!)</span>
                    </div>
                </div>
            </div>
            <div class="grand-final-perks">
                <p><strong>Grand Final Advantage:</strong> The team that finishes <strong>#1 in the Group Stage</strong> gets a big bonus for the Grand Final match!</p>
                <p>They get to:
                    <br><strong>CHOOSE ALL 3 MAPS</strong> for the Grand Final!
                    <br><strong>Choose their opponent</strong> for the Grand Final!
                </p>
            </div>
            <p class="note">We'll update this bracket as the semi-finals happen!</p>
        </div>
    </div>

    <script>
        const tournamentStartDate = new Date(2025, 5, 21); // June 21, 2025 (Month is 0-indexed)

        function formatDate(date) {
            const options = { weekday: 'short', year: 'numeric', month: 'long', day: 'numeric' };
            return date.toLocaleDateString('en-US', options);
        }

        const mapPools = {
            Convergence: [
                "Empire Of Eternal Night: Central Park", 
                "Intergalactic Empire of Wakanda: Hall of Djalia", 
                "Klyntar: Symbiotic Surface", 
                "Tokyo 2099: Shin-Shibuya"
            ],
            Convoy: [
                "Arakko", 
                "Empire Of Eternal Night: Midtown", 
                "Tokyo 2099: Spider-Islands", 
                "Yggsgard: Yggdrasill Path"
            ],
            Domination: [
                "Hellfire Gala: Krakoa", 
                "Hydra Charteris Base: Hell’s Heaven", 
                "Intergalactic Empire of Wakanda: Birnin T’Challa", 
                "Yggsgard: Royal Palace"
            ]
        };
        const nonDominationModeNames = ['Convoy', 'Convergence'];


        const pixelIcons = {
            red: `<svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg"><path d="M2 2h6v6H2z" fill="currentColor"/></svg>`, 
            blue: `<svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg"><path d="M4 0h2v10H4zm-4 4h10v2H0z" fill="currentColor"/></svg>`, 
            green: `<svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h10v2H0zm4 2h2v8H4z" fill="currentColor"/></svg>`, 
            yellow: `<svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg"><path d="M5 0L10 5L5 10L0 5L5 0z M5 2L8 5L5 8L2 5L5 2z" fill="currentColor"/></svg>`, 
            purple: `<svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h2v10H0zm8 0h2v10H8zm-5 4h4v2H3z" fill="currentColor"/></svg>` 
        };

        let teams = [
            { id: 1, name: "Team Goene (Red)",    color: 'var(--team-color-red)',    icon: pixelIcons.red,    played: 0, wins: 0, losses: 0, roundsWon: 0, roundsLost: 0, points: 0, dominationsPlayed: 0 },
            { id: 2, name: "Team Ryzhov (Blue)",   color: 'var(--team-color-blue)',   icon: pixelIcons.blue,   played: 0, wins: 0, losses: 0, roundsWon: 0, roundsLost: 0, points: 0, dominationsPlayed: 0 },
            { id: 3, name: "Team Goncharov (Green)",  color: 'var(--team-color-green)',  icon: pixelIcons.green,  played: 0, wins: 0, losses: 0, roundsWon: 0, roundsLost: 0, points: 0, dominationsPlayed: 0 },
            { id: 4, name: "Team Ishkhanov (Yellow)", color: 'var(--team-color-yellow)', icon: pixelIcons.yellow, played: 0, wins: 0, losses: 0, roundsWon: 0, roundsLost: 0, points: 0, dominationsPlayed: 0 },
            { id: 5, name: "Team Snap (Purple)", color: 'var(--team-color-purple)', icon: pixelIcons.purple, played: 0, wins: 0, losses: 0, roundsWon: 0, roundsLost: 0, points: 0, dominationsPlayed: 0 }
        ];

        // Scores are manually entered here by the organizer in the team1Score and team2Score properties
       let matches = [
            // SATURDAY 1 (Originally Saturday 4's matches) - Bye Team 4
            { day: 1, team1Id: 1, team2Id: 2, byeTeamId: 4, team1Score: null, team2Score: null, mapName: null, gameMode: null, played: false }, 
            { day: 1, team1Id: 5, team2Id: 3, byeTeamId: 4, team1Score: null, team2Score: null, mapName: null, gameMode: null, played: false }, 
            
            // SATURDAY 2 - Bye Team 5
            { day: 2, team1Id: 1, team2Id: 4, byeTeamId: 5, team1Score: null, team2Score: null, mapName: null, gameMode: null, played: false }, 
            { day: 2, team1Id: 2, team2Id: 3, byeTeamId: 5, team1Score: null, team2Score: null, mapName: null, gameMode: null, played: false }, 
            
            // SATURDAY 3 - Bye Team 2
            { day: 3, team1Id: 1, team2Id: 3, byeTeamId: 2, team1Score: null, team2Score: null, mapName: null, gameMode: null, played: false }, 
            { day: 3, team1Id: 5, team2Id: 4, byeTeamId: 2, team1Score: null, team2Score: null, mapName: null, gameMode: null, played: false }, 
            
            // SATURDAY 4 (Originally Saturday 1's matches) - Bye Team 3
            { day: 4, team1Id: 1, team2Id: 5, byeTeamId: 3, team1Score: null, team2Score: null, mapName: null, gameMode: null, played: false }, 
            { day: 4, team1Id: 2, team2Id: 4, byeTeamId: 3, team1Score: null, team2Score: null, mapName: null, gameMode: null, played: false }, 
            
            // SATURDAY 5 - Bye Team 1
            { day: 5, team1Id: 2, team2Id: 5, byeTeamId: 1, team1Score: null, team2Score: null, mapName: null, gameMode: null, played: false }, 
            { day: 5, team1Id: 4, team2Id: 3, byeTeamId: 1, team1Score: null, team2Score: null, mapName: null, gameMode: null, played: false }  
        ];
        
        function getRandomElement(arr) {
            if (!arr || arr.length === 0) return null;
            return arr[Math.floor(Math.random() * arr.length)];
        }

        function assignMapsAndModesToMatches() {
            teams.forEach(team => team.dominationsPlayed = 0); 
            let usedMaps = { Convergence: new Set(), Convoy: new Set(), Domination: new Set() };

            function getMapForMode(modeName) {
                let pool = mapPools[modeName];
                if (!pool) { console.error("Unknown mode:", modeName); return "Unknown Map"; }
                let availableMaps = pool.filter(map => !usedMaps[modeName].has(map));
                if (availableMaps.length === 0) { 
                    usedMaps[modeName].clear(); 
                    availableMaps = [...pool];
                }
                const chosenMap = getRandomElement(availableMaps);
                if (chosenMap) usedMaps[modeName].add(chosenMap);
                return chosenMap || getRandomElement(pool); 
            }

            for (let day = 1; day <= 5; day++) {
                const matchesOnThisDay = matches.filter(m => m.day === day);
                if (matchesOnThisDay.length !== 2) continue; // Should always be 2

                const matchA = matchesOnThisDay[0];
                const matchB = matchesOnThisDay[1];

                const teamsInA = [getTeam(matchA.team1Id), getTeam(matchA.team2Id)];
                const teamsInB = [getTeam(matchB.team1Id), getTeam(matchB.team2Id)];

                let assignDomToA = false;
                const canAHostDom = teamsInA.every(t => t.dominationsPlayed < 2);
                const canBHostDom = teamsInB.every(t => t.dominationsPlayed < 2);

                if (canAHostDom && !canBHostDom) {
                    assignDomToA = true;
                } else if (!canAHostDom && canBHostDom) {
                    assignDomToA = false;
                } else if (canAHostDom && canBHostDom) {
                    const sumDomA = teamsInA.reduce((sum, t) => sum + t.dominationsPlayed, 0);
                    const sumDomB = teamsInB.reduce((sum, t) => sum + t.dominationsPlayed, 0);
                    assignDomToA = sumDomA <= sumDomB; // Prefer match where teams have played fewer Dom games
                } else { // Neither can host without a team exceeding 2 Dom games OR both would still be <= 2
                      // This implies one team (or more) in EACH match has already played 2 Dom games.
                      // This specific logic branch needs to ensure one Dom game is still assigned per day.
                      // If both canAHostDom and canBHostDom are false, one of them WILL push a team to 3 dom games.
                      // In this rare edge case (shouldn't happen if logic is perfect for 5 teams/5 dom games),
                      // we pick one randomly, or the one that 'hurts' less (e.g. only one team goes to 3 vs two teams).
                      // For now, simple random choice if forced into this.
                    assignDomToA = Math.random() < 0.5;
                     // console.warn(`Day ${day}: Forced choice for Domination slot. A: ${canAHostDom}, B: ${canBHostDom}. Counts: T1:${teams[0].dominationsPlayed}, T2:${teams[1].dominationsPlayed}, T3:${teams[2].dominationsPlayed}, T4:${teams[3].dominationsPlayed}, T5:${teams[4].dominationsPlayed}`);
                }
                
                const domMatch = assignDomToA ? matchA : matchB;
                const otherMatch = assignDomToA ? matchB : matchA;

                domMatch.mapName = getMapForMode("Domination");
                domMatch.gameMode = "Domination";
                getTeam(domMatch.team1Id).dominationsPlayed++;
                getTeam(domMatch.team2Id).dominationsPlayed++;
                
                const otherModeName = getRandomElement(nonDominationModeNames);
                otherMatch.mapName = getMapForMode(otherModeName);
                otherMatch.gameMode = otherModeName;
            }
        }


        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('startDateDisplay').textContent = formatDate(tournamentStartDate);
            
            const playoffSat1Date = new Date(tournamentStartDate.getTime() + 5 * 7 * 24 * 60 * 60 * 1000); 
            const playoffSat2Date = new Date(tournamentStartDate.getTime() + 6 * 7 * 24 * 60 * 60 * 1000); 
            document.getElementById('playoffDate1').textContent = formatDate(playoffSat1Date);
            document.getElementById('playoffDate2').textContent = formatDate(playoffSat2Date);
            document.getElementById('playoffDate1Header').textContent = `(${formatDate(playoffSat1Date)})`;
            document.getElementById('playoffDate2Header').textContent = `(${formatDate(playoffSat2Date)})`;
            document.getElementById('playoffDate2HeaderThird').textContent = `(${formatDate(playoffSat2Date)})`;

            assignMapsAndModesToMatches(); 
            calculateTeamStatsFromMatches(); 
            renderMatchSchedule(); 
        });
        
        function getTeam(teamId) {
            return teams.find(t => t.id === teamId);
        }
        function getTeamName(teamId) {
            const team = getTeam(teamId);
            return team ? team.name : 'Unknown Team';
        }

        function renderMatchSchedule() {
            const scheduleDiv = document.getElementById('matchSchedule');
            scheduleDiv.innerHTML = ''; 
            let currentDay = 0;
            let currentEventDate;

            matches.forEach((match, index) => {
                if (match.day !== currentDay) {
                    currentDay = match.day;
                    currentEventDate = new Date(tournamentStartDate.getTime() + (currentDay - 1) * 7 * 24 * 60 * 60 * 1000);
                    const dayHeader = document.createElement('h4');
                    dayHeader.textContent = `Saturday ${currentDay} (${formatDate(currentEventDate)}) — Break: ${getTeamName(match.byeTeamId)}`;
                    scheduleDiv.appendChild(dayHeader);
                }

                const team1 = getTeam(match.team1Id);
                const team2 = getTeam(match.team2Id);
                
                let scoreText = `<span class="placeholder">Match Awaiting Scores</span>`;
                if (typeof match.team1Score === 'number' && typeof match.team2Score === 'number') {
                    scoreText = `${match.team1Score} - ${match.team2Score}`;
                }

                const matchDiv = document.createElement('div');
                matchDiv.classList.add('match-entry');
                matchDiv.innerHTML = `
                    <div class="match-details">
                        <span class="team-identifier" style="color:${team1.color};">${team1.icon || ''} ${team1.name}</span> 
                        <span class="vs-text">vs</span>
                        <span class="team-identifier" style="color:${team2.color};">${team2.icon || ''} ${team2.name}</span>
                    </div>
                    <div class="match-map-info">
                        <strong>Map:</strong> ${match.mapName || 'TBD'} &nbsp;&nbsp;&nbsp; <strong>Mode:</strong> ${match.gameMode || 'TBD'}
                    </div>
                    <div class="match-score-display">
                        ${scoreText}
                    </div>
                `;
                scheduleDiv.appendChild(matchDiv);
            });
        }
        
        function resetTeamStats() {
            teams.forEach(team => {
                team.played = 0;
                team.wins = 0;
                team.losses = 0;
                team.roundsWon = 0;
                team.roundsLost = 0;
                team.points = 0;
                // dominationsPlayed is part of the map assignment logic, not reset with scores
            });
        }

        function calculateTeamStatsFromMatches() { 
            resetTeamStats();
            matches.forEach((match) => {
                const t1Rounds = match.team1Score;
                const t2Rounds = match.team2Score;
                
                if (typeof t1Rounds === 'number' && typeof t2Rounds === 'number' &&
                    ((t1Rounds === 2 && (t2Rounds === 0 || t2Rounds === 1)) ||
                     (t2Rounds === 2 && (t1Rounds === 0 || t1Rounds === 1)))) {
                    match.played = true;
                } else {
                    match.played = false; 
                    return; 
                }
                
                const team1 = getTeam(match.team1Id);
                const team2 = getTeam(match.team2Id);

                if (!team1 || !team2) return;

                let r1 = t1Rounds;
                let r2 = t2Rounds;

                team1.played++;
                team2.played++;
                team1.roundsWon += r1;
                team1.roundsLost += r2;
                team2.roundsWon += r2;
                team2.roundsLost += r1;

                if (r1 === 2) { 
                    team1.wins++; team2.losses++; team1.points += 3;
                    if (r2 === 1) { team2.points += 1; }
                } else if (r2 === 2) { 
                    team2.wins++; team1.losses++; team2.points += 3;
                    if (r1 === 1) { team1.points += 1; }
                }
            });
            renderLeagueTable();
            updatePlayoffDisplay();
        }

        function renderLeagueTable() {
            const tableBody = document.getElementById('leagueTable').getElementsByTagName('tbody')[0];
            tableBody.innerHTML = ''; 

            const sortedTeams = [...teams].sort((a, b) => {
                if (b.points !== a.points) return b.points - a.points;
                const roundsDiffA = a.roundsWon - a.roundsLost;
                const roundsDiffB = b.roundsWon - b.roundsLost;
                if (roundsDiffB !== roundsDiffA) return roundsDiffB - roundsDiffA;
                if (b.roundsWon !== a.roundsWon) return b.roundsWon - a.roundsWon;
                return getTeamName(a.id).localeCompare(getTeamName(b.id));
            });

            sortedTeams.forEach((teamData, index) => {
                const row = tableBody.insertRow();
                row.insertCell().textContent = index + 1; 
                
                const nameCell = row.insertCell();
                nameCell.classList.add('team-name-cell');
                nameCell.innerHTML = ` 
                    <span style="color: ${teamData.color}; display: inline-flex; align-items: center;">
                        ${teamData.icon || ''} 
                        ${teamData.name}
                    </span>
                `;
                
                row.insertCell().textContent = teamData.played;
                row.insertCell().textContent = teamData.wins;
                row.insertCell().textContent = teamData.losses;
                row.insertCell().textContent = teamData.roundsWon;
                row.insertCell().textContent = teamData.roundsLost;
                row.insertCell().textContent = teamData.points;
            });
        }
        
        function updatePlayoffDisplay() {
            const sortedTeams = [...teams].sort((a, b) => { 
                if (b.points !== a.points) return b.points - a.points;
                const roundsDiffA = a.roundsWon - a.roundsLost;
                const roundsDiffB = b.roundsWon - b.roundsLost;
                if (roundsDiffB !== roundsDiffA) return roundsDiffB - roundsDiffA;
                if (b.roundsWon !== a.roundsWon) return b.roundsWon - a.roundsWon;
                return getTeamName(a.id).localeCompare(getTeamName(b.id));
            });

            const sf1Div = document.getElementById('sf1');
            const sf2Div = document.getElementById('sf2');
            const finalDiv = document.getElementById('final');
            const thirdPlaceDiv = document.getElementById('third-place');
            
            const setMatchText = (div, teamAName, teamBName, defaultTextA = "Team TBD", defaultTextB = "Team TBD", seedInfo = "") => {
                div.innerHTML = `<span class="team-placeholder">${teamAName || defaultTextA}</span> vs <span class="team-placeholder">${teamBName || defaultTextB}</span> <span class="seed-info">${seedInfo}</span>`;
            };

            const anystats = teams.some(t => t.played > 0);

            if (sortedTeams.length >= 4 && anystats) { 
                setMatchText(sf1Div, getTeamName(sortedTeams[0].id), getTeamName(sortedTeams[3].id), "Seed 1", "Seed 4", "(Match A)");
                setMatchText(sf2Div, getTeamName(sortedTeams[1].id), getTeamName(sortedTeams[2].id), "Seed 2", "Seed 3", "(Match B)");
                setMatchText(finalDiv, "Winner of Match A", "Winner of Match B", "TBD", "TBD", "(For the Championship!)");
                setMatchText(thirdPlaceDiv, "Loser of Match A", "Loser of Match B", "TBD", "TBD", "(For Bronze!)");
            } else { 
                setMatchText(sf1Div, "Team Seed 1", "Team Seed 4", "Team TBD", "Team TBD", "(Match A)");
                setMatchText(sf2Div, "Team Seed 2", "Team Seed 3", "Team TBD", "Team TBD", "(Match B)");
                setMatchText(finalDiv, "Winner of Match A", "Winner of Match B", "TBD", "TBD", "(For the Championship!)");
                setMatchText(thirdPlaceDiv, "Loser of Match A", "Loser of Match B", "TBD", "TBD", "(For Bronze!)");
            }
        }

        function generateShareableTableCard() { 
            const cardContainer = document.getElementById('shareableTableCardContainer');
            const displayDiv = document.getElementById('shareableTableDisplay');
            
            let tableHTML = `<table class="shareable-html-table">
                                <thead>
                                    <tr>
                                        <th>Rank</th>
                                        <th>Team</th>
                                        <th>Pld</th>
                                        <th>W</th>
                                        <th>L</th>
                                        <th>RW</th>
                                        <th>RL</th>
                                        <th>Pts</th>
                                    </tr>
                                </thead>
                                <tbody>`;

            const sortedTeams = [...teams].sort((a, b) => {
                if (b.points !== a.points) return b.points - a.points;
                const roundsDiffA = a.roundsWon - a.roundsLost;
                const roundsDiffB = b.roundsWon - b.roundsLost;
                if (roundsDiffB !== roundsDiffA) return roundsDiffB - roundsDiffA;
                if (b.roundsWon !== a.roundsWon) return b.roundsWon - a.roundsWon;
                return getTeamName(a.id).localeCompare(getTeamName(b.id));
            });

            sortedTeams.forEach((team, index) => {
                tableHTML += `<tr>
                                <td>${index + 1}</td>
                                <td style="color: ${team.color}; display: flex; align-items: center;">
                                    <span class="team-icon-share" style="color: ${team.color};">${team.icon || ''}</span> 
                                    <span style="margin-left: 5px;">${team.name}</span>
                                </td>
                                <td>${team.played}</td>
                                <td>${team.wins}</td>
                                <td>${team.losses}</td>
                                <td>${team.roundsWon}</td>
                                <td>${team.roundsLost}</td>
                                <td>${team.points}</td>
                              </tr>`;
            });
            
            tableHTML += `</tbody></table>`;
            displayDiv.innerHTML = tableHTML;
            cardContainer.style.display = 'block';
        }

    </script>
</body>
</html>
